import java.awt.Color;
import java.awt.Component;

import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.ListCellRenderer;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.TableCellRenderer;

public class CustomCellRenderer extends JLabel implements ListCellRenderer {
	
	protected static Border noFocusBorder = new EmptyBorder(30, 1, 1, 30);

	  protected static TitledBorder focusBorder = new TitledBorder(LineBorder.createGrayLineBorder(),
	      "title");

	  protected DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();

	  
	  public CustomCellRenderer() {
	         setOpaque(true);
	     }

	  
	@Override
	public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected,
			boolean cellHasFocus) {
		JLabel renderer = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index,
		        isSelected, cellHasFocus);
		    renderer.setBorder(cellHasFocus ? focusBorder : noFocusBorder);
		   
		   
		    
		    
	         Color background;
	         Color foreground;

	         // check if this cell represents the current DnD drop location
	         JList.DropLocation dropLocation = list.getDropLocation();
	         if (dropLocation != null
	                 && !dropLocation.isInsert()
	                 && dropLocation.getIndex() == index) {

	             background = Color.BLUE;
	             foreground = Color.WHITE;

	         // check if this cell is selected
	         } else if (isSelected) {
	             background = Color.RED;
	             foreground = Color.WHITE;

	         // unselected, and not the DnD drop location
	         } else {
	             background = Color.WHITE;
	             foreground = Color.BLACK;
	         };

	         setBackground(background);
	         setForeground(foreground);

	         return renderer;
	         
	}

}

